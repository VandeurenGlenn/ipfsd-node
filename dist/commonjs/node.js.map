{"version":3,"file":"node.js","sources":["src/node.js"],"sourcesContent":["// ipfs modules\r\nimport * as Repo from 'ipfs-repo';\r\nimport * as IPFSFactory from 'ipfsd-ctl';\r\n// buildin modules\r\nimport { join } from 'path';\r\nimport { unlinkSync, rmdirSync } from 'fs';\r\n\r\nimport chalk from 'chalk';\r\nimport { config } from 'repo-configs';\r\nimport * as fs from 'crypto-io-fs';\r\nimport del from 'del';\r\nimport normalizeNewline from 'normalize-newline';\r\nimport { merge } from 'lodash';\r\n\r\nconst { exists, write } = fs;\r\nconst factory = IPFSFactory.create({type: 'go'});\r\n\r\nif (process.platform === 'win32') {\r\n  const readLine = require('readline').createInterface({\r\n    input: process.stdin,\r\n    output: process.stdout\r\n  });\r\n\r\n  readLine.on('SIGINT', () => {\r\n    process.emit('SIGINT');\r\n  });\r\n};\r\n\r\n\r\n\r\nconst initRepo = async (ipfsRepo, options) => {\r\n  const { repo, spec, netkey } = await config(options);\r\n  const dataSpecPath = join(options.repoPath, 'datastore_spec')\r\n  ipfsRepo.init(repo, async error => {\r\n    if (error) throw Error(error);\r\n    await write(dataSpecPath, JSON.stringify(spec));\r\n    if (netkey) {      \r\n      const netkeyPath = join(options.repoPath, 'swarm.key');\r\n      console.log(netkey);\r\n      await write(netkeyPath, normalizeNewline(netkey));\r\n    }\r\n    return;\r\n  });\r\n}\r\n\r\nconst spawn = options => new Promise((resolve, reject) => {\r\n  factory.spawn(options, (error, ipfsd) => {\r\n    if (error) reject(error);\r\n    resolve(ipfsd);    \r\n  });\r\n});\r\n\r\nconst start = (ipfsd, flags) => new Promise(async (resolve, reject) => {\r\n  ipfsd.start(flags, error => {\r\n    if (error) reject(error);\r\n    if (ipfsd.api) {\r\n      ipfsd.api.id().then(({id, addresses}) => {\r\n        console.group(chalk.green('ipfs daemon started and listening on'));\r\n        addresses.forEach(address => console.log(chalk.cyan(address)))\r\n        console.groupEnd();\r\n        resolve({id, addresses})\r\n      }).catch(error => reject(error))\r\n    } else {\r\n      return start(ipfsd, flags)\r\n    }\r\n    \r\n  });\r\n});\r\n\r\nconst cleanRepo = async repoPath => {\r\n  console.log(`cleaning repo`);\r\n  try {\r\n    const arr = [\r\n      join(repoPath, 'api'),\r\n      join(repoPath, 'repo.lock')\r\n    ]\r\n    let count = 0;\r\n    for (const path of arr) {\r\n      count++;\r\n      const fileExists = await exists(path)\r\n      if (fileExists) unlinkSync(path)\r\n      if (count === arr.length) {        \r\n        return;\r\n      }\r\n    }\r\n  } catch (error) {\r\n    throw Error(error)\r\n  }\r\n};\r\n\r\nconst prepareRepo = (repo, options) => new Promise((resolve, reject) => {\r\n  repo.exists(async (error, exists) => {\r\n    if (error) reject(error);\r\n    else if (exists) resolve();\r\n    else await initRepo(repo, options);\r\n    resolve();\r\n  })\r\n});\r\n\r\nconst startIpfsd = async (ipfsd, options) => {\r\n  const ipfstStartTime = Date.now();\r\n  try {\r\n    \r\n    const { id, addresses } = await start(ipfsd, options.flags);\r\n    \r\n    console.log(`Daemon startup time: ${(Date.now() - ipfstStartTime) / 1000}s`);\r\n    return { ipfsd, id, addresses };\r\n      \r\n  } catch (error) {\r\n    if (error.message.includes('cannot acquire lock') ||\r\n        error.code === 'ECONNREFUSED') {      \r\n      await cleanRepo(options.repoPath);\r\n    }\r\n    return startIpfsd(ipfsd, options);\r\n    // errorHandler(error);\r\n  }\r\n}\r\nconst defaultOptions = {\r\n  repoPath: join(process.cwd(), 'repo')\r\n}\r\n\r\nexport default async (options = {}) => {\r\n  options = merge(defaultOptions, options)\r\n  const repo = new Repo(options.repoPath);\r\n  await prepareRepo(repo, options);\r\n  const ipfsd = await spawn({init: false, repoPath: options.repoPath, disposable: false});\r\n  return {\r\n    start: async flags => startIpfsd(ipfsd, options),\r\n    stop: async () => {\r\n      await ipfsd.stop()\r\n      await del(options.repoPath)\r\n    },\r\n    init: options => initRepo(repo, options)\r\n  }\r\n}\r\n"],"names":["fs","IPFSFactory.create","config","join","path","unlinkSync","merge"],"mappings":"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"}